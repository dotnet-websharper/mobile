<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>IntelliFactory.JavaScript</name></assembly>
<members>
<member name="P:IntelliFactory.JavaScript.Scope.Bindings">
<summary>
 Returns the set of bound identifiers.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scope.OpenNestedScope">
<summary>
 Returns a new nested scope.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scope.NewId(System.String)">
<summary>
 Generates a new identifier with a given prefix.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scope.New">
<summary>
 Constructs a new empty scope.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Scope">
<summary>
 Manages JavaScript scoping.
</summary>
</member>
<member name="P:IntelliFactory.JavaScript.Core.Builder.Scheme">
<summary>
 Exposes the underlying Scheme semantics.
</summary>
</member>
<member name="P:IntelliFactory.JavaScript.Core.Builder.Null">
<summary>
 Constructs &quot;Null&quot;.
</summary>
</member>
<member name="P:IntelliFactory.JavaScript.Core.Builder.Global">
<summary>
 Constructs a global lookup expression.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.While(IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive},IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive})">
<summary>
 Constructs a loop.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.Void(IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive})">
<summary>
 Constructs &quot;Void&quot; (&quot;void x&quot;).
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.Value(IntelliFactory.JavaScript.Core.Literal)">
<summary>
 Constructs a literal expression.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.Unary(IntelliFactory.JavaScript.Syntax.UnaryOperator,IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive})">
<summary>
 Constructs an unary expression.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.TypeOf(IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive})">
<summary>
 Constructs &quot;TypeOf&quot; (&quot;typeof x&quot;).
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.TryWith(IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive},IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive})">
<summary>
 Constructs a &quot;try&quot; without a &quot;finally&quot; clause.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.TryFinally(IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive},IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive})">
<summary>
 Constructs a &quot;try&quot; without a &quot;catch&quot; clause.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.Try(IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive},IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive},IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive})">
<summary>
 Constructs a &quot;try&quot; with both a &quot;finally&quot; and a &quot;catch&quot; clauses.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.Throw(IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive})">
<summary>
 Constructs &quot;Throw&quot;.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.Subtract(IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive},IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive})">
<summary>
 Constructs &quot;Subtract&quot; (&quot;x - y&quot;).
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.String(System.String)">
<summary>
 Constructs &quot;String&quot;.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.Set(IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive},IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive},IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive})">
<summary>
 Constructs &quot;Set&quot;.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.RightShiftUnsigned(IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive},IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive})">
<summary>
 Constructs &quot;RightShiftUnsigned&quot; (&quot;x &gt;&gt;&gt;= y&quot;).
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.RightShift(IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive},IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive})">
<summary>
 Constructs &quot;RightShift&quot; (&quot;x &gt;&gt;= y&quot;).
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.Regex(IntelliFactory.JavaScript.Syntax.Regex)">
<summary>
 Constructs &quot;Regex&quot;.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.Primitive(IntelliFactory.JavaScript.Core.Primitive,System.Collections.Generic.IEnumerable{IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive}})">
<summary>
 Constructs a primitive expression.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.Plus(IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive})">
<summary>
 Constructs &quot;Plus&quot; (&quot;+ x&quot;).
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.Or(IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive},IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive})">
<summary>
 Constructs a logical OR expression.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.Object(System.Collections.Generic.IEnumerable{System.Tuple`2{System.String,IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive}}})">
<summary>
 Constructs &quot;Object&quot;.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.NotIdentical(IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive},IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive})">
<summary>
 Constructs &quot;NotIdentical&quot; (&quot;x !== y&quot;).
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.NotEqual(IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive},IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive})">
<summary>
 Constructs &quot;NotEqual&quot; (&quot;x != y&quot;).
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.Not(IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive})">
<summary>
 Constructs &quot;Not&quot; (&quot;! x&quot;).
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.New(IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive},System.Collections.Generic.IEnumerable{IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive}})">
<summary>
 Constructs &quot;New&quot;.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.Multiply(IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive},IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive})">
<summary>
 Constructs &quot;Multiply&quot; (&quot;x * y&quot;).
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.Modulo(IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive},IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive})">
<summary>
 Constructs &quot;Modulo&quot; (&quot;x % y&quot;).
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.Minus(IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive})">
<summary>
 Constructs &quot;Minus&quot; (&quot;- x&quot;).
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.LessThanOrEqual(IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive},IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive})">
<summary>
 Constructs &quot;LessThanOrEqual&quot; (&quot;x &lt;= y&quot;).
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.LessThan(IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive},IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive})">
<summary>
 Constructs &quot;LessThan&quot; (&quot;x &lt; y&quot;).
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.LeftShift(IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive},IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive})">
<summary>
 Constructs &quot;LeftShift&quot; (&quot;x &lt;&lt; y&quot;).
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.Lambda(Microsoft.FSharp.Core.FSharpOption{IntelliFactory.JavaScript.Scheme.Id},System.Collections.Generic.IEnumerable{IntelliFactory.JavaScript.Scheme.Id},IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive})">
<summary>
 Constructs an anonymous function. The first argument is the
 optional target or &quot;this&quot; parameter of the function.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.Iterate(IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive},IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive})">
<summary>
 Constructs &quot;Iterate&quot;.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.Integer(System.Int64)">
<summary>
 Constructs &quot;Integer&quot;.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.Int(System.Int32)">
<summary>
 Constructs &quot;Integer&quot;.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.InstanceOf(IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive},IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive})">
<summary>
 Constructs &quot;InstanceOf&quot; (&quot;x instance y&quot;).
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.In(IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive},IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive})">
<summary>
 Constructs &quot;In&quot; (&quot;x in y&quot;).
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.Identical(IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive},IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive})">
<summary>
 Constructs &quot;Identical&quot; (&quot;x === y&quot;).
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.GreaterThanOrEqual(IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive},IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive})">
<summary>
 Constructs &quot;GreaterThanOrEqual&quot; (&quot;x &gt;= y&quot;).
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.GreaterThan(IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive},IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive})">
<summary>
 Constructs &quot;GreaterThan&quot; (&quot;x &gt; y&quot;).
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.Get(IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive},IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive})">
<summary>
 Constructs &quot;Get&quot;.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.Equal(IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive},IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive})">
<summary>
 Constructs &quot;Equal&quot; (&quot;x == y&quot;).
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.Double(System.Double)">
<summary>
 Constructs &quot;Double&quot;.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.Divide(IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive},IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive})">
<summary>
 Constructs &quot;Divide&quot; (&quot;x / y&quot;).
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.Boolean(System.Boolean)">
<summary>
 Constructs &quot;Boolean&quot;.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.BitwiseXor(IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive},IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive})">
<summary>
 Constructs &quot;BitwiseXor&quot; (&quot;x ^ y&quot;).
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.BitwiseOr(IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive},IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive})">
<summary>
 Constructs &quot;BitwiseOr&quot; (&quot;x | y&quot;).
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.BitwiseNot(IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive})">
<summary>
 Constructs &quot;BitwiseNot&quot; (&quot;~ x&quot;).
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.BitwiseAnd(IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive},IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive})">
<summary>
 Constructs &quot;BitwiseAnd&quot; (&quot;x &amp; y&quot;).
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.Binary(IntelliFactory.JavaScript.Syntax.BinaryOperator,IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive},IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive})">
<summary>
 Constructs a binary expression.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.Array(System.Collections.Generic.IEnumerable{IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive}})">
<summary>
 Constructs &quot;Array&quot;.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.Apply(Microsoft.FSharp.Core.FSharpOption{IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive}},IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive},System.Collections.Generic.IEnumerable{IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive}})">
<summary>
 Constructs an application. The first argument is the optional
 target or &quot;this&quot; parameter of the application.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.And(IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive},IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive})">
<summary>
 Constructs a logical AND expression.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.Builder.Add(IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive},IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive})">
<summary>
 Constructs &quot;Add&quot; (&quot;x + y&quot;).
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Core.Builder">
<summary>
 Provides operations on expressions.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Core.Id">
<summary>
 Represents suggested alphanumeric identifier names.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Core.Level">
<summary>
 Represents variable nesting levels.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Core.Index">
<summary>
 Represents De Bruijn indices of variables.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Core.Expression">
<summary>
 Represents expressions.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Core.Shape">
<summary>
 Represents the expression shape.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Core.Primitive.While">
<summary>
 &quot;While c b&quot; represents &quot;while (c ()) { b() }&quot;. Arity: 2.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Core.Primitive.Value">
<summary>
 Represents literal values. Arity: 0.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Core.Primitive.Unary">
<summary>
 Represents pure unary operators. Arity: 1.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Core.Primitive.Try">
<summary>
 &quot;Try a b c&quot; represents:
 &quot;try { a(); } catch (temp) { b(temp); } finally { c(); }&quot;.
 The first and second branches may evaluate to expressions.
 The second and third branches are optional (may be Undefined).
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Core.Primitive.Throw">
<summary>
 Represents &quot;throw x&quot;. Evaluates to Undefined. Arity: 1.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Core.Primitive.Set">
<summary>
 &quot;Set x y z&quot; represents &quot;void (x[y] = z)&quot;. Arity: 3.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Core.Primitive.Object">
<summary>
 Represents object literals. Arity: 0+.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Core.Primitive.New">
<summary>
 Represents constructor applications. Arity: 1+.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Core.Primitive.Iterate">
<summary>
 &quot;Iterate f x&quot; represents the following:
 &quot;for (var temp in x) { if (f(x)) break; }&quot;.
 Arity: 2.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Core.Primitive.Global">
<summary>
 Represents the global scope. Arity: 0.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Core.Primitive.Get">
<summary>
 Represents member access, as in &quot;x[y]&quot;. Arity: 2.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Core.Primitive.Delete">
<summary>
 Represents a &quot;delete x&quot; operation. Arity: 1.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Core.Primitive.Binary">
<summary>
 Represents pure binary operators. Arity: 2.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Core.Primitive.Array">
<summary>
 Represents array literals. Arity: 0+.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Core.Primitive">
<summary>
 Represents primitives.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:IntelliFactory.JavaScript.Core.Literal">
<summary>
 Represents literal values.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.|Name|_|(IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive})">
<summary>
 Recognizes qualified name lookups.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Core.NewBuilder">
<summary>
 Constructs a new Builder.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Core">
<summary>
 Defines a Scheme-based language for expressing JavaScript.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Elaboration.Elaborate(IntelliFactory.JavaScript.Scheme.Expression{IntelliFactory.JavaScript.Core.Primitive})">
<summary>
 Elaborates a `Core` expression to a `Syntax` expression.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Elaboration">
<summary>
 Defines the elaboration of the `Core` language to the `Syntax` language.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:IntelliFactory.JavaScript.Extensions">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:IntelliFactory.JavaScript.Grammar">
<summary>
 Defines the grammar for JavaScript ECMA-262 with parser combinators.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Identifier.Quote(System.String)">
<summary>
 If the input is a valid identifier, returns it, otherwise quotes it
 and returns a valid string literal.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Identifier.IsValid(System.String)">
<summary>
 Checks if a name is a valid identifier name.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Identifier.IsReserved(System.String)">
<summary>
 Checks if a string is a reserved word.
</summary>
</member>
<member name="P:IntelliFactory.JavaScript.Identifier.Pattern.ValidIdentifier">
<summary>
 Matches valid identifiers.
</summary>
</member>
<member name="P:IntelliFactory.JavaScript.Identifier.Pattern.InvalidCharacter">
<summary>
 Matches invalid characters within identifiers.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Identifier.Pattern">
<summary>
 Contains helper Regex patterns.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Identifier">
<summary>
 Provides utilities for working with JavaScript identifier names.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:IntelliFactory.JavaScript.Lexer">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:IntelliFactory.JavaScript.Lexing.Token.NewLine(System.Boolean)">
<summary>
 Accesses the newline field.
</summary>
</member>
<member name="P:IntelliFactory.JavaScript.Lexing.Token.Lines(System.Int32)">
<summary>
 Returns the height of the token in lines.
</summary>
</member>
<member name="P:IntelliFactory.JavaScript.Lexing.Token.Columns(System.Int32)">
<summary>
 Returns the width of the token in columns.
</summary>
</member>
<member name="P:IntelliFactory.JavaScript.Lexing.Token.Value">
<summary>
 Unpacks the `Token` into a `TokenValue`.
</summary>
</member>
<member name="P:IntelliFactory.JavaScript.Lexing.Token.NewLine">
<summary>
 Accesses the newline field.
</summary>
</member>
<member name="P:IntelliFactory.JavaScript.Lexing.Token.Lines">
<summary>
 Returns the height of the token in lines.
</summary>
</member>
<member name="P:IntelliFactory.JavaScript.Lexing.Token.Columns">
<summary>
 Returns the width of the token in columns.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Lexing.Token.ToString">
<summary>
 Converts the token to a string.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Lexing.Token.String(System.String)">
<summary>
 Constructs a String token.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Lexing.Token.Regex(System.String)">
<summary>
 Constructs a Regex token.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Lexing.Token.Number(System.String)">
<summary>
 Constructs a Double or Integer token from a string literal.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Lexing.Token.Keyword(IntelliFactory.JavaScript.Lexing.Keyword)">
<summary>
 Constructs a Keyword token.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Lexing.Token.Integer(System.String)">
<summary>
 Constructs an Integer token from a string literal.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Lexing.Token.Id(System.String)">
<summary>
 Constructs an Identifier token.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Lexing.Token.GetHashCode">
<summary>
 Custom hashing that ignores lines/columns fields.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Lexing.Token.Equals(System.Object)">
<summary>
 Custom equality that ignores the lines/columns fields.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Lexing.Token.Double(System.String)">
<summary>
 Constructs a Double token from a string literal.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:IntelliFactory.JavaScript.Lexing.Token">
<summary>
 Represents a token as a 64-bit structure.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:IntelliFactory.JavaScript.Lexing.TokenValue">
<summary>
 Represents a token value.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:IntelliFactory.JavaScript.Lexing.TokenType">
<summary>
 Represents token types.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:IntelliFactory.JavaScript.Lexing.Keyword">
<summary>
 Encodes keywords.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Lexing.Lexeme(Microsoft.FSharp.Text.Lexing.LexBuffer{System.Char})">
<summary>
 Takes the current lexeme as a string.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Lexing.NewLine(Microsoft.FSharp.Text.Lexing.LexBuffer{System.Char})">
<summary>
 Advances the buffer position to the next line.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Lexing.ShowKeyword(IntelliFactory.JavaScript.Lexing.Keyword)">
<summary>
 Transforms a `Keyword` to its visual representation.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Lexing">
<summary>
 Declares the data structures used by the lexer.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:IntelliFactory.JavaScript.Parser.ParseSource">
<summary>
 Represents a source for parsing.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:IntelliFactory.JavaScript.Parser.Source">
<summary>
 Represents a source for lexing.
</summary>
</member>
<member name="">

</member>
<member name="M:IntelliFactory.JavaScript.Parser.ParseStatement(IntelliFactory.JavaScript.Parser.Source)">
<summary>
 Parses a JavaScript statement.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Parser.ParseExpression(IntelliFactory.JavaScript.Parser.Source)">
<summary>
 Parses a JavaScript expression.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Parser.ParseProgram(IntelliFactory.JavaScript.Parser.Source)">
<summary>
 Parses a JavaScript program.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Parser.Parse``1(IntelliFactory.JavaScript.ParserCombinators.Parser{IntelliFactory.JavaScript.Lexing.Token,``0},IntelliFactory.JavaScript.Parser.Source)">
<summary>
 Parses an arbitrary JavaScript grammar element.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Parser.Lex(IntelliFactory.JavaScript.Parser.Source)">
<summary>
 Lexes a Source.
</summary>
</member>
<member name="">

</member>
<member name="T:IntelliFactory.JavaScript.Parser">
<summary>
 Parses JavaScript.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:IntelliFactory.JavaScript.ParserCombinators.Associativity">
<summary>
 Represents operator associativity.
</summary>
</member>
<member name="">

</member>
<member name="M:IntelliFactory.JavaScript.ParserCombinators.ParserBuilder`1.Zero``1">
<summary>
 Implements empty conditional branches.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.ParserCombinators.ParserBuilder`1.ReturnFrom``1(IntelliFactory.JavaScript.ParserCombinators.Parser{`0,``0})">
<summary>
 Implements &quot;return!&quot; syntax.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.ParserCombinators.ParserBuilder`1.Return``1(``0)">
<summary>
 Implements &quot;return&quot; syntax.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.ParserCombinators.ParserBuilder`1.Delay``2(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,IntelliFactory.JavaScript.ParserCombinators.Parser{``0,``1}})">
<summary>
 Delays a parser.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.ParserCombinators.ParserBuilder`1.Combine``2(IntelliFactory.JavaScript.ParserCombinators.Parser{`0,``0},IntelliFactory.JavaScript.ParserCombinators.Parser{`0,``1})">
<summary>
 Implements parser combination.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.ParserCombinators.ParserBuilder`1.Bind``2(IntelliFactory.JavaScript.ParserCombinators.Parser{`0,``0},Microsoft.FSharp.Core.FSharpFunc`2{``0,IntelliFactory.JavaScript.ParserCombinators.Parser{`0,``1}})">
<summary>
 Implements &quot;let!&quot; syntax.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.ParserCombinators.ParserBuilder`1">
<summary>
 Implements parser workflows.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:IntelliFactory.JavaScript.ParserCombinators.Parser`2">
<summary>
 Represents a parser parameterized by the token and result types.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:IntelliFactory.JavaScript.ParserCombinators.ParseTextFile``1(IntelliFactory.JavaScript.ParserCombinators.Parser{System.Int32,``0},System.String)">
<summary>
 Parses a text file.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.ParserCombinators.ParseBinaryFile``1(IntelliFactory.JavaScript.ParserCombinators.Parser{System.Int32,``0},System.String)">
<summary>
 Parses a binary file.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.ParserCombinators.ParseSequence``2(IntelliFactory.JavaScript.ParserCombinators.Parser{``0,``1},``0,System.Collections.Generic.IEnumerable{``0})">
<summary>
 Parses the given sequence.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.ParserCombinators.Parse``2(IntelliFactory.JavaScript.ParserCombinators.Parser{``0,``1},Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,``0})">
<summary>
 Parses an input.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.ParserCombinators.Option``2(IntelliFactory.JavaScript.ParserCombinators.Parser{``0,``1})">
<summary>
 Embeds partial results into an option type.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.ParserCombinators.Optional``2(``0,IntelliFactory.JavaScript.ParserCombinators.Parser{``1,``0})">
<summary>
 Provides a default value for the parser.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.ParserCombinators.Choose``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpOption{``1}})">
<summary>
 Parses tokens by a given selector.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.ParserCombinators.Filter``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean})">
<summary>
 Parses tokens matching a predicate.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.ParserCombinators.Any``1">
<summary>
 Parses any token.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.ParserCombinators.Token``1(``0)">
<summary>
 Parses the exact token.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.ParserCombinators.Branch``2(IntelliFactory.JavaScript.ParserCombinators.Parser{``0,``1},IntelliFactory.JavaScript.ParserCombinators.Parser{``0,``1})">
<summary>
 Implements choice with full backtracking.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.ParserCombinators.Choice``2(IntelliFactory.JavaScript.ParserCombinators.Parser{``0,``1},IntelliFactory.JavaScript.ParserCombinators.Parser{``0,``1})">
<summary>
 Implements choice with limited backtracking.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.ParserCombinators.Apply``3(IntelliFactory.JavaScript.ParserCombinators.Parser{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``2}},IntelliFactory.JavaScript.ParserCombinators.Parser{``0,``1})">
<summary>
 Implements applicative composition of parsers.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.ParserCombinators.Zip``4(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``2}},IntelliFactory.JavaScript.ParserCombinators.Parser{``3,``0},IntelliFactory.JavaScript.ParserCombinators.Parser{``3,``1})">
<summary>
 Zips two parsers sequentially.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.ParserCombinators.Combine``3(IntelliFactory.JavaScript.ParserCombinators.Parser{``0,``1},IntelliFactory.JavaScript.ParserCombinators.Parser{``0,``2})">
<summary>
 Implements sequential combination of parsers.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.ParserCombinators.Map``3(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},IntelliFactory.JavaScript.ParserCombinators.Parser{``2,``0})">
<summary>
 Maps over the parser results.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.ParserCombinators.Bind``3(Microsoft.FSharp.Core.FSharpFunc`2{``0,IntelliFactory.JavaScript.ParserCombinators.Parser{``1,``2}},IntelliFactory.JavaScript.ParserCombinators.Parser{``1,``0})">
<summary>
 Implements monadic bind or dynamic combination of parsers.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.ParserCombinators.Return``2(``0)">
<summary>
 Constructs an immediately succeeding parser.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.ParserCombinators.Fail``2">
<summary>
 Constructs an immediately failing parser.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.ParserCombinators.Delay``2(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,IntelliFactory.JavaScript.ParserCombinators.Parser{``0,``1}})">
<summary>
 Delays a parser.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:IntelliFactory.JavaScript.ParserCombinators.Operators">

</member>
<member name="T:IntelliFactory.JavaScript.ParserCombinators">

</member>
<member name="M:IntelliFactory.JavaScript.Recognition.RecognizeProgram(Microsoft.FSharp.Collections.FSharpList{IntelliFactory.JavaScript.Syntax.Statement})">
<summary>
 Recognizes programs, list of statements without a value.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Recognition.RecognizeFunctionBody(Microsoft.FSharp.Collections.FSharpList{IntelliFactory.JavaScript.Syntax.Statement})">
<summary>
 Recognizes a list of statements that have a value indicated
 by `return`, for example function bodies.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Recognition.RecognizeExpression(IntelliFactory.JavaScript.Syntax.Expression)">
<summary>
 Recognizes simple expressions.
</summary>
</member>
<member name="">

</member>
<member name="T:IntelliFactory.JavaScript.Recognition.RecognitionException">
<summary>
 Thrown on recognition failure.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Recognition">
<summary>
 Defines the recognition of the `Core` language from the raw `Syntax`.
</summary>
</member>
<member name="P:IntelliFactory.JavaScript.Scheme.Builder`1.Undefined">
<summary>
 Constructs an Undefined expression.
</summary>
</member>
<member name="P:IntelliFactory.JavaScript.Scheme.Builder`1.DoLetRecursive">
<summary>
 Exposes a workflow builder for recursive let expressions.
</summary>
</member>
<member name="P:IntelliFactory.JavaScript.Scheme.Builder`1.DoLet">
<summary>
 Exposes a workflow builder for let expressions.
</summary>
</member>
<member name="P:IntelliFactory.JavaScript.Scheme.Builder`1.DoLambda">
<summary>
 Exposes a workflow builder for lambda expressions.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.Builder`1.Var(System.Int32)">
<summary>
 Constructs a variable reference.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.Builder`1.Shift(System.UInt32,IntelliFactory.JavaScript.Scheme.Expression{`0})">
<summary>
 Shifts De Bruijn indices.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.Builder`1.Replace(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{IntelliFactory.JavaScript.Scheme.Expression{`0},Microsoft.FSharp.Core.FSharpOption{IntelliFactory.JavaScript.Scheme.Expression{`0}}}},IntelliFactory.JavaScript.Scheme.Expression{`0})">
<summary>
 Does a bottom-up replacement of all matching sub-expressions.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.Builder`1.Primitive(`0,System.Collections.Generic.IEnumerable{IntelliFactory.JavaScript.Scheme.Expression{`0}})">
<summary>
 Constructs a primitive expression.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.Builder`1.Optimize(IntelliFactory.JavaScript.Scheme.Expression{`0})">
<summary>
 Optimizes the expression by eliminating common sub-expressions.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.Builder`1.LetSequential(System.Collections.Generic.IEnumerable{IntelliFactory.JavaScript.Scheme.Id},System.Collections.Generic.IEnumerable{IntelliFactory.JavaScript.Scheme.Expression{`0}},IntelliFactory.JavaScript.Scheme.Expression{`0})">
<summary>
 Constructs a sequential let binding, as LET* in LISP.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.Builder`1.LetRecursive(System.Collections.Generic.IEnumerable{IntelliFactory.JavaScript.Scheme.Id},System.Collections.Generic.IEnumerable{IntelliFactory.JavaScript.Scheme.Expression{`0}},IntelliFactory.JavaScript.Scheme.Expression{`0})">
<summary>
 Constructs a recursive Let binding, as LETREC in LISP.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.Builder`1.LetParallel(System.Collections.Generic.IEnumerable{IntelliFactory.JavaScript.Scheme.Id},System.Collections.Generic.IEnumerable{IntelliFactory.JavaScript.Scheme.Expression{`0}},IntelliFactory.JavaScript.Scheme.Expression{`0})">
<summary>
 Constructs a parallel Let binding, as LET in LISP.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.Builder`1.LetAssignments(System.Collections.Generic.IEnumerable{IntelliFactory.JavaScript.Scheme.Id},System.Collections.Generic.IEnumerable{IntelliFactory.JavaScript.Scheme.Expression{`0}},IntelliFactory.JavaScript.Scheme.Expression{`0})">
<summary>
 Expresses LetRecursive with Let and Assign.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.Builder`1.Let(IntelliFactory.JavaScript.Scheme.Id,IntelliFactory.JavaScript.Scheme.Expression{`0},IntelliFactory.JavaScript.Scheme.Expression{`0})">
<summary>
 Constructs a Let binding.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.Builder`1.Lambda(System.Collections.Generic.IEnumerable{IntelliFactory.JavaScript.Scheme.Id},IntelliFactory.JavaScript.Scheme.Expression{`0})">
<summary>
 Constructs an anonymous function.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.Builder`1.IsUsed(System.Int32,IntelliFactory.JavaScript.Scheme.Expression{`0})">
<summary>
 Tests if a free index is referenced in an expression.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.Builder`1.IsPure(IntelliFactory.JavaScript.Scheme.Expression{`0})">
<summary>
 Tests if an expression is pure.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.Builder`1.IsGround(IntelliFactory.JavaScript.Scheme.Expression{`0})">
<summary>
 Tests if an expression is ground.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.Builder`1.If(IntelliFactory.JavaScript.Scheme.Expression{`0},IntelliFactory.JavaScript.Scheme.Expression{`0},IntelliFactory.JavaScript.Scheme.Expression{`0})">
<summary>
 Constructs a conditional.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.Builder`1.GetVariableUses(IntelliFactory.JavaScript.Scheme.Expression{`0})">
<summary>
 Gets all uses of variables in an expression.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.Builder`1.GetVariableUse(System.Int32,IntelliFactory.JavaScript.Scheme.Expression{`0})">
<summary>
 Gets the use of a given variable in an expression.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.Builder`1.GetSize(Microsoft.FSharp.Core.FSharpOption{System.Int32},IntelliFactory.JavaScript.Scheme.Expression{`0})">
<summary>
 Gets the size of an expression, with an optional max value.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.Builder`1.Do(System.Collections.Generic.IEnumerable{IntelliFactory.JavaScript.Scheme.Expression{`0}})">
<summary>
 Constructs a sequentially evaluated expression,
 similar to LISP PROGN.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.Builder`1.Build(IntelliFactory.JavaScript.Scheme.Shape{`0},System.Collections.Generic.IEnumerable{IntelliFactory.JavaScript.Scheme.Expression{`0}})">
<summary>
 Constructs an expression from its shape and children.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.Builder`1.Assign(System.Int32,IntelliFactory.JavaScript.Scheme.Expression{`0})">
<summary>
 Constructs a variable assignment.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.Builder`1.Apply(IntelliFactory.JavaScript.Scheme.Expression{`0},System.Collections.Generic.IEnumerable{IntelliFactory.JavaScript.Scheme.Expression{`0}})">
<summary>
 Constructs an application.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Scheme.Builder`1">
<summary>
 Builds and optimizes expressions.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.LetBuilder`1.Return(IntelliFactory.JavaScript.Scheme.Expression{`0})">
<summary>
 Returns from the builder.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.LetBuilder`1.Delay(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,IntelliFactory.JavaScript.Scheme.Expression{`0}})">
<summary>
 Constructs the expression.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.LetBuilder`1.Bind(System.Tuple`2{System.String,IntelliFactory.JavaScript.Scheme.Expression{`0}},Microsoft.FSharp.Core.FSharpFunc`2{IntelliFactory.JavaScript.Scheme.Expression{`0},IntelliFactory.JavaScript.Scheme.Expression{`0}})">
<summary>
 Adds a let branch.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Scheme.LetBuilder`1">
<summary>
 Assists the construction of nested let expressions.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.LetRecursiveBuilder`1.Return``1(``0)">
<summary>
 Returns the branch and body values.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.LetRecursiveBuilder`1.Delay(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,IntelliFactory.JavaScript.Scheme.LetRecursiveSpec{IntelliFactory.JavaScript.Scheme.Expression{`0},`0}})">
<summary>
 Constructs the expression.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.LetRecursiveBuilder`1.Bind``1(System.String,Microsoft.FSharp.Core.FSharpFunc`2{IntelliFactory.JavaScript.Scheme.Expression{`0},IntelliFactory.JavaScript.Scheme.LetRecursiveSpec{System.Tuple`2{IntelliFactory.JavaScript.Scheme.Expression{`0},``0},`0}})">
<summary>
 Adds a new label.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Scheme.LetRecursiveBuilder`1">
<summary>
 Assists the construction of recursive let expressions.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Scheme.LetRecursiveSpec`2">
<summary>
 Represents a specification to build a recursive let expression.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.LambdaBuilder`1.Return(IntelliFactory.JavaScript.Scheme.Expression{`0})">
<summary>
 Returns the body of the lambda being constructed.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.LambdaBuilder`1.Delay(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,IntelliFactory.JavaScript.Scheme.LambdaSpec{`0}})">
<summary>
 Constructs the expression.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.LambdaBuilder`1.Bind(System.String,Microsoft.FSharp.Core.FSharpFunc`2{IntelliFactory.JavaScript.Scheme.Expression{`0},IntelliFactory.JavaScript.Scheme.LambdaSpec{`0}})">
<summary>
 Adds a lambda parameter.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Scheme.LambdaBuilder`1">
<summary>
 Assists the construction of lambda expressions.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Scheme.LambdaSpec`1">
<summary>
 Represents a specification to build a lambda expression.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.IDefinition`1.MakeBasis(Microsoft.FSharp.Core.FSharpFunc`2{`0,Microsoft.FSharp.Core.FSharpFunc`2{System.Collections.Generic.IEnumerable{IntelliFactory.JavaScript.Scheme.Expression{`0}},IntelliFactory.JavaScript.Scheme.Expression{`0}}})">
<summary>
 Creates a new basis.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.IDefinition`1.Lift(IntelliFactory.JavaScript.Scheme.Expression{`0})">
<summary>
 Attempts to lift an expression from its local context.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.IDefinition`1.IsTrue(`0)">
<summary>
 Tests if the primitive is boolean true.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.IDefinition`1.IsSmall(IntelliFactory.JavaScript.Scheme.Expression{`0})">
<summary>
 Tests if an expression is small-enough for inlining.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.IDefinition`1.IsPure(`0)">
<summary>
 Tests if the primitive is pure.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.IDefinition`1.IsFalse(`0)">
<summary>
 Tests if the primitive is boolean false.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.IDefinition`1.Evaluate(`0,Microsoft.FSharp.Collections.FSharpList{`0})">
<summary>
 Performs constant folding.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Scheme.IDefinition`1">
<summary>
 Specifies a Scheme-based language definition.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.IBasis`1.While(IntelliFactory.JavaScript.Scheme.Expression{`0},IntelliFactory.JavaScript.Scheme.Expression{`0})">
<summary>
 Constructs a while loop.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.IBasis`1.Int(System.Int32)">
<summary>
 Constructs an integer expression.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.IBasis`1.Equal(IntelliFactory.JavaScript.Scheme.Expression{`0},IntelliFactory.JavaScript.Scheme.Expression{`0})">
<summary>
 Constructs an equality test.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.IBasis`1.Boolean(System.Boolean)">
<summary>
 Constructs a boolean expression.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.IBasis`1.ArrayGet(IntelliFactory.JavaScript.Scheme.Expression{`0},System.Int32)">
<summary>
 Constructs an array access expression.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.IBasis`1.Array(System.Collections.Generic.IEnumerable{IntelliFactory.JavaScript.Scheme.Expression{`0}})">
<summary>
 Constructs an array expression.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Scheme.IBasis`1">
<summary>
 Defines basic operations on expressions.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Scheme.Constructor`1">
<summary>
 Constructs new primitive expressions.
</summary>
</member>
<member name="P:IntelliFactory.JavaScript.Scheme.Expression`1.Shape">
<summary>
 Returns the shape of the expression.
</summary>
</member>
<member name="P:IntelliFactory.JavaScript.Scheme.Expression`1.Items">
<summary>
 Returns the immediate sub-expressions.
</summary>
</member>
<member name="P:IntelliFactory.JavaScript.Scheme.Expression`1.Item(System.Int32)">
<summary>
 Retrieves the given sub-expression.
</summary>
</member>
<member name="P:IntelliFactory.JavaScript.Scheme.Expression`1.Count">
<summary>
 Returns the sub-expression count.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Scheme.Expression`1">
<summary>
 Represents expressions.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:IntelliFactory.JavaScript.Scheme.VariableUse">
<summary>
 Enumerates the uses of variables.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:IntelliFactory.JavaScript.Scheme.Shape`1">
<summary>
 Represents the shape of an expression.
</summary>
</member>
<member name="">

</member>
<member name="T:IntelliFactory.JavaScript.Scheme.Id">
<summary>
 Represents suggested alphanumeric identifier names.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Scheme.Level">
<summary>
 Represents variable nesting levels.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Scheme.Index">
<summary>
 Represents De Bruijn indices of variables.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Scheme.NewBuilder``1(IntelliFactory.JavaScript.Scheme.IDefinition{``0})">
<summary>
 Constructs a Builder for a custom language.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Scheme">
<summary>
 Defines a small extensible functional language.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.StringLiteral.Quote(System.String)">
<summary>
 Returns a JavaScript string literal for a given string.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.StringLiteral.Escape(System.String)">
<summary>
 Escapes characters within the input string according to the
 JavaScript string literal rules.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.StringLiteral.WriteQuoted(System.String,System.IO.TextWriter)">
<summary>
 Writes a JavaScript string literal to the writer.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.StringLiteral.WriteEscaped(System.String,System.IO.TextWriter)">
<summary>
 Writes the input characters to the given `TextWriter`, escaping them
 according to the JavaScript string literal rules.
</summary>
</member>
<member name="P:IntelliFactory.JavaScript.StringLiteral.MustEscapePattern">
<summary>
 Matches characters that must be escaped in JavaScript string literals.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.StringLiteral.Write(System.Text.RegularExpressions.Regex,Microsoft.FSharp.Core.FSharpFunc`2{System.Char,System.String},System.String,System.IO.TextWriter)">
<summary>
 Writes a string to the `TextWriter`, with all matched
 characters escaped by the given function.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.StringLiteral">
<summary>
 Provides utilities for working with JavaScript string literals.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Syntax.Program">
<summary>
 Represents complete JavaScript programs.
</summary>
</member>
<member name="">

</member>
<member name="P:IntelliFactory.JavaScript.Syntax.Precedence.Default">
<summary>
 The default precedence.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Syntax.Precedence.Of(IntelliFactory.JavaScript.Syntax.Expression)">
<summary>
 Calculates the precedence level of an expression. 
 Smaller values take precedence.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Syntax.Precedence">
<summary>
 Describes the operator precedence.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:IntelliFactory.JavaScript.Syntax.Declaration">
<summary>
 Represents variable declarations.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:IntelliFactory.JavaScript.Syntax.Case">
<summary>
 Represents a case in a `switch` statement.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:IntelliFactory.JavaScript.Syntax.Statement">
<summary>
 JavaScript statements.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:IntelliFactory.JavaScript.Syntax.Address.Of(IntelliFactory.JavaScript.Syntax.Expression)">
<summary>
 Parses an `Address` from an `Expression`. Throws
 `SyntaxException` when it is not possible.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Syntax.Address">
<summary>
 Represents assignable addresses.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:IntelliFactory.JavaScript.Syntax.Expression">
<summary>
 Represents JavaScript expressions.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:IntelliFactory.JavaScript.Syntax.Fixity">
<summary>
 Represents unary operator fixity.
</summary>
</member>
<member name="F:IntelliFactory.JavaScript.Syntax.BinaryOperator.Subtract">
<summary>
 `x - y`
</summary>
</member>
<member name="F:IntelliFactory.JavaScript.Syntax.BinaryOperator.RightShiftUnsigned">
<summary>
 `x &gt;&gt;&gt; y`
</summary>
</member>
<member name="F:IntelliFactory.JavaScript.Syntax.BinaryOperator.RightShift">
<summary>
 `x &gt;&gt; y`
</summary>
</member>
<member name="F:IntelliFactory.JavaScript.Syntax.BinaryOperator.NotIdentical">
<summary>
 `x !== y`
</summary>
</member>
<member name="F:IntelliFactory.JavaScript.Syntax.BinaryOperator.NotEqual">
<summary>
 `x != y`
</summary>
</member>
<member name="F:IntelliFactory.JavaScript.Syntax.BinaryOperator.Multiply">
<summary>
 `x * y`
</summary>
</member>
<member name="F:IntelliFactory.JavaScript.Syntax.BinaryOperator.Modulo">
<summary>
 `x % y`
</summary>
</member>
<member name="F:IntelliFactory.JavaScript.Syntax.BinaryOperator.LessThan">
<summary>
 `x &lt; y`
</summary>
</member>
<member name="F:IntelliFactory.JavaScript.Syntax.BinaryOperator.LeftShift">
<summary>
 `x &lt;&lt; y`
</summary>
</member>
<member name="F:IntelliFactory.JavaScript.Syntax.BinaryOperator.LessThanOrEqual">
<summary>
 `x &lt;= y`
</summary>
</member>
<member name="F:IntelliFactory.JavaScript.Syntax.BinaryOperator.InstanceOf">
<summary>
 `x instanceof y`
</summary>
</member>
<member name="F:IntelliFactory.JavaScript.Syntax.BinaryOperator.In">
<summary>
 `x in y`
</summary>
</member>
<member name="F:IntelliFactory.JavaScript.Syntax.BinaryOperator.Identical">
<summary>
 `x === y`
</summary>
</member>
<member name="F:IntelliFactory.JavaScript.Syntax.BinaryOperator.GreaterThan">
<summary>
 `x &gt; y`
</summary>
</member>
<member name="F:IntelliFactory.JavaScript.Syntax.BinaryOperator.GreaterThanOrEqual">
<summary>
 `x &gt;= y`
</summary>
</member>
<member name="F:IntelliFactory.JavaScript.Syntax.BinaryOperator.Equal">
<summary>
 `x == y`
</summary>
</member>
<member name="F:IntelliFactory.JavaScript.Syntax.BinaryOperator.Divide">
<summary>
 `x / y`
</summary>
</member>
<member name="F:IntelliFactory.JavaScript.Syntax.BinaryOperator.BitwiseXor">
<summary>
 `x ^ y`
</summary>
</member>
<member name="F:IntelliFactory.JavaScript.Syntax.BinaryOperator.BitwiseOr">
<summary>
 `x | y`
</summary>
</member>
<member name="F:IntelliFactory.JavaScript.Syntax.BinaryOperator.BitwiseAnd">
<summary>
 `x &amp; y`
</summary>
</member>
<member name="F:IntelliFactory.JavaScript.Syntax.BinaryOperator.Add">
<summary>
 `x + y`
</summary>
</member>
<member name="">

</member>
<member name="T:IntelliFactory.JavaScript.Syntax.BinaryOperator">
<summary>
 Represents JavaScript binary operators.
</summary>
</member>
<member name="F:IntelliFactory.JavaScript.Syntax.UnaryOperator.Void">
<summary>
 void
</summary>
</member>
<member name="F:IntelliFactory.JavaScript.Syntax.UnaryOperator.TypeOf">
<summary>
 typeof
</summary>
</member>
<member name="F:IntelliFactory.JavaScript.Syntax.UnaryOperator.Plus">
<summary>
 +
</summary>
</member>
<member name="F:IntelliFactory.JavaScript.Syntax.UnaryOperator.Minus">
<summary>
 -
</summary>
</member>
<member name="F:IntelliFactory.JavaScript.Syntax.UnaryOperator.BitwiseNot">
<summary>
 ~
</summary>
</member>
<member name="F:IntelliFactory.JavaScript.Syntax.UnaryOperator.Not">
<summary>
 !
</summary>
</member>
<member name="">

</member>
<member name="T:IntelliFactory.JavaScript.Syntax.UnaryOperator">
<summary>
 Represents JavaScript prefix operators.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:IntelliFactory.JavaScript.Syntax.Regex">
<summary>
 Represents valid JavaScript regular expression literals.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:IntelliFactory.JavaScript.Syntax.Id.Create(System.String)">
<summary>
 Creates an identifier, replacing invalid 
 characters with underscores.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:IntelliFactory.JavaScript.Syntax.Id">
<summary>
 Represents valid JavaScript identifiers.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Syntax.ShowBinaryOperator(IntelliFactory.JavaScript.Syntax.BinaryOperator)">
<summary>
 Converts binary operator to a string.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Syntax.ShowUnaryOperator(IntelliFactory.JavaScript.Syntax.UnaryOperator)">
<summary>
 Converts an unary operator to a string.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Syntax.PackBlock(Microsoft.FSharp.Collections.FSharpList{IntelliFactory.JavaScript.Syntax.Statement})">
<summary>
 Packs a block to a statement
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Syntax.UnpackBlock(IntelliFactory.JavaScript.Syntax.Statement)">
<summary>
 Unpacks a block from a statement.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Syntax.GetBindings(Microsoft.FSharp.Collections.FSharpSet{IntelliFactory.JavaScript.Syntax.Id},IntelliFactory.JavaScript.Syntax.Statement)">
<summary>
 Gets the set of locally scoped identifiers in a statement.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Syntax.EliminateFor(Microsoft.FSharp.Core.FSharpOption{IntelliFactory.JavaScript.Syntax.Expression},Microsoft.FSharp.Core.FSharpOption{IntelliFactory.JavaScript.Syntax.Expression},Microsoft.FSharp.Core.FSharpOption{IntelliFactory.JavaScript.Syntax.Expression},IntelliFactory.JavaScript.Syntax.Statement)">
<summary>
 Expresses a `for` statement in terms of `while`.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Syntax.|Undefined|_|(IntelliFactory.JavaScript.Syntax.Expression)">
<summary>
 Matches the `undefined` identifier.
</summary>
</member>
<member name="P:IntelliFactory.JavaScript.Syntax.Undefined">
<summary>
 Constructs the `undefined` identifier.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Syntax.|Id|(IntelliFactory.JavaScript.Syntax.Id)">
<summary>
 Matches the identifier name.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Syntax.SyntaxException">
<summary>
 Thrown on syntactical errors.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Syntax">
<summary>
 Defines the JavaScript abstract syntax tree.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:IntelliFactory.JavaScript.Writer.Preferences">
<summary>
 Defines code writing preferences.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Writer.ProgramToString(IntelliFactory.JavaScript.Writer.Preferences,Microsoft.FSharp.Collections.FSharpList{IntelliFactory.JavaScript.Syntax.Statement})">
<summary>
 Writes a JavaScript program to a string.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Writer.StatementToString(IntelliFactory.JavaScript.Writer.Preferences,IntelliFactory.JavaScript.Syntax.Statement)">
<summary>
 Writes a JavaScript statement to a string.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Writer.ExpressionToString(IntelliFactory.JavaScript.Writer.Preferences,IntelliFactory.JavaScript.Syntax.Expression)">
<summary>
 Writes a JavaScript expression to a string.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Writer.WriteProgram(IntelliFactory.JavaScript.Writer.Preferences,System.IO.TextWriter,Microsoft.FSharp.Collections.FSharpList{IntelliFactory.JavaScript.Syntax.Statement})">
<summary>
 Writes a JavaScript program to a writer.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Writer.WriteStatement(IntelliFactory.JavaScript.Writer.Preferences,System.IO.TextWriter,IntelliFactory.JavaScript.Syntax.Statement)">
<summary>
 Writes a JavaScript statement to a writer.
</summary>
</member>
<member name="M:IntelliFactory.JavaScript.Writer.WriteExpression(IntelliFactory.JavaScript.Writer.Preferences,System.IO.TextWriter,IntelliFactory.JavaScript.Syntax.Expression)">
<summary>
 Writes a JavaScript expression to a writer.
</summary>
</member>
<member name="T:IntelliFactory.JavaScript.Writer">
<summary>
 Provides a writer for JavaScript syntax.
</summary>
</member>
</members>
</doc>
